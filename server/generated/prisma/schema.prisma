// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id               String            @id @default(uuid())
  email            String            @unique
  password         String
  firstName        String
  lastName         String
  age              Int?
  weight           Float?
  height           Float?
  experience       String? // beginner, intermediate, advanced
  availability     Json? // Weekly availability in a structured format
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  profile          Profile?
  trainingPlans    TrainingPlan[]
  trainingSessions TrainingSession[]
  exerciseLogs     ExerciseLog[]

  @@index([email])
}

// User profile with fitness data
model Profile {
  id                  String   @id @default(uuid())
  userId              String   @unique
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  fitnessLevel        String? // beginner, intermediate, advanced
  fitnessGoals        String[] // ["lose_weight", "build_muscle", etc.]
  medicalIssues       String[]
  availableEquipment  String[]
  trainingPreferences Json?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@index([userId])
}

// Training Plan model
model TrainingPlan {
  id               String            @id @default(uuid())
  userId           String
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  name             String
  description      String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  isActive         Boolean           @default(true)
  generatedBy      String            @default("gpt-4") // AI model that generated the plan
  trainingSessions TrainingSession[]

  @@index([userId])
}

// Training Session model
model TrainingSession {
  id             String        @id @default(uuid())
  trainingPlanId String
  trainingPlan   TrainingPlan  @relation(fields: [trainingPlanId], references: [id], onDelete: Cascade)
  userId         String
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  dayOfWeek      Int // 1-7 representing Monday-Sunday
  feedback       String? // General feedback for the session
  completed      Boolean       @default(false)
  scheduledDate  DateTime?
  completedDate  DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  exerciseLogs   ExerciseLog[]

  @@index([trainingPlanId])
  @@index([userId])
}

// Exercise Log model
model ExerciseLog {
  id                String          @id @default(uuid())
  trainingSessionId String
  trainingSession   TrainingSession @relation(fields: [trainingSessionId], references: [id], onDelete: Cascade)
  userId            String
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  exerciseName      String
  sets              Int
  reps              String // Can be a range like "8-12" or specific like "10"
  weight            Float?
  rir               Int? // Rate of Perceived Exertion (RPE) or Reps In Reserve (RIR)
  feedback          String? // User's feelings/feedback on the exercise
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@index([trainingSessionId])
  @@index([userId])
}
