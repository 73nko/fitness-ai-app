syntax = "proto3";

package ai;

service AIService {
  // Generate training feedback based on user progress
  rpc GenerateFeedback(FeedbackRequest) returns (FeedbackResponse);

  // Generate workout recommendations
  rpc GenerateRecommendations(RecommendationRequest) returns (RecommendationResponse);

  // Analyze user progress
  rpc AnalyzeProgress(ProgressAnalysisRequest) returns (ProgressAnalysisResponse);

  // Generate training plan based on user profile
  rpc GenerateTrainingPlan(UserProfile) returns (TrainingPlan);
}

// User profile for AI training plan generation
message UserProfile {
  string user_id = 1;
  int32 age = 2;
  float height = 3;
  float weight = 4;
  string fitness_level = 5; // beginner, intermediate, advanced
  repeated string fitness_goals = 6; // ["lose_weight", "build_muscle", etc.]
  repeated string medical_issues = 7;
  repeated string available_equipment = 8;
  string training_preferences = 9; // JSON string for additional preferences
  int32 days_per_week = 10; // Number of days per week the user can train
  optional string focus_areas = 11; // Specific body areas to focus on
}

// Training plan generated by AI
message TrainingPlan {
  string id = 1;
  string user_id = 2;
  string name = 3;
  string objective = 4;
  string description = 5;
  int32 days_per_week = 6;
  repeated TrainingSession sessions = 7;
  string generated_at = 8;
  string model_used = 9;
}

// Training session for specific day
message TrainingSession {
  int32 day_of_week = 1; // 1-7 representing Monday-Sunday
  string focus = 2; // e.g., "Upper Body", "Lower Body", "Full Body", etc.
  repeated ExercisePlan exercises = 3;
  int32 estimated_duration = 4; // In minutes
  optional string notes = 5;
}

// Exercise plan
message ExercisePlan {
  string name = 1;
  string description = 2;
  int32 sets = 3;
  string reps = 4; // Can be a range like "8-12" or specific like "10"
  int32 rest_seconds = 5;
  optional string notes = 6;
  int32 order = 7; // Order within the session
}

// Feedback request
message FeedbackRequest {
  string user_id = 1;
  optional string training_id = 2;
  optional string start_date = 3;
  optional string end_date = 4;
}

// Feedback response
message FeedbackResponse {
  string user_id = 1;
  string feedback = 2;
  repeated ExerciseFeedback exercise_feedback = 3;
  string generated_at = 4;
  string model_used = 5;
}

// Exercise feedback
message ExerciseFeedback {
  string exercise_id = 1;
  string exercise_name = 2;
  string feedback = 3;
  optional string suggestion = 4;
}

// Recommendation request
message RecommendationRequest {
  string user_id = 1;
  optional string training_id = 2;
  optional string focus_area = 3;
}

// Recommendation response
message RecommendationResponse {
  string user_id = 1;
  repeated ExerciseRecommendation recommendations = 2;
  string generated_at = 3;
  string model_used = 4;
}

// Exercise recommendation
message ExerciseRecommendation {
  string exercise_name = 1;
  string description = 2;
  string benefit = 3;
  optional string video_url = 4;
  optional string image_url = 5;
  int32 recommended_sets = 6;
  string recommended_reps = 7;
  int32 recommended_rest = 8;
}

// Progress analysis request
message ProgressAnalysisRequest {
  string user_id = 1;
  optional string training_id = 2;
  optional string start_date = 3;
  optional string end_date = 4;
}

// Progress analysis response
message ProgressAnalysisResponse {
  string user_id = 1;
  string overall_analysis = 2;
  repeated StrengthAreaAnalysis strength_areas = 3;
  repeated WeaknessAreaAnalysis weakness_areas = 4;
  repeated ActionItem action_items = 5;
  string generated_at = 6;
  string model_used = 7;
}

// Strength area analysis
message StrengthAreaAnalysis {
  string area = 1;
  string description = 2;
  float improvement_percentage = 3;
}

// Weakness area analysis
message WeaknessAreaAnalysis {
  string area = 1;
  string description = 2;
  optional string suggestion = 3;
}

// Action item
message ActionItem {
  string description = 1;
  string reason = 2;
  int32 priority = 3; // 1-5 scale, 5 being highest priority
}